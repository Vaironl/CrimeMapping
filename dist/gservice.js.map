{"version":3,"sources":["../app/JavaScripts/gservice.js"],"names":["angular","googleMapService","locations","selectedLat","selectedLong","$http","convertToMapPoints","initialize","i","response","user","contentString","latlon","google","message","content","maxWidth","username","gender","age","favlang","myLatLng","lat","lng","map","document","zoom","center","marker","position","n","title","icon","currentSelectedMarker","initialLocation","animation","lastMarker"],"mappings":"cACA;;AACAA,OAAO,CAAPA,MAAAA,CAAAA,UAAAA,EAAAA,EAAAA,EAAAA,OAAAA,CAAAA,UAAAA,EACyB,UAAA,KAAA,EAAe;AAEhC;AACA;AACA;AACA,MAAIC,gBAAgB,GALY,EAKhC,CALgC,CAOhC;;AACA,MAAIC,SAAS,GARmB,EAQhC,CARgC,CAUhC;;AACA,MAAIC,WAAW,GAAf,KAAA;AACA,MAAIC,YAAY,GAAG,CAZa,KAYhC,CAZgC,CAchC;AACA;AACA;;AACAH,EAAAA,gBAAgB,CAAhBA,OAAAA,GAA2B,UAAA,QAAA,EAAA,SAAA,EAA6B;AAEpD;AACAC,IAAAA,SAAS,GAH2C,EAGpDA,CAHoD,CAKpD;;AACAC,IAAAA,WAAW,GAAXA,QAAAA;AACAC,IAAAA,YAAY,GAPwC,SAOpDA,CAPoD,CASpD;;AACAC,IAAAA,KAAK,CAALA,GAAAA,CAAAA,QAAAA,EAAAA,OAAAA,CAA4B,UAAA,QAAA,EAAkB;AAE1C;AACAH,MAAAA,SAAS,GAAGI,kBAAkB,CAHY,QAGZ,CAA9BJ,CAH0C,CAK1C;;AACAK,MAAAA,UAAU,CAAA,QAAA,EAAVA,SAAU,CAAVA;AANJF,KAAAA,EAAAA,KAAAA,CAOS,YAAU,CAPnBA,CAAAA;AA3B4B,GAiBhCJ,CAjBgC,CAqChC;AACA;AACA;;;AACA,MAAIK,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,QAAA,EAAkB;AAEvC;AACA,QAAIJ,SAAS,GAH0B,EAGvC,CAHuC,CAKvC;;AACA,SAAI,IAAIM,CAAC,GAAT,CAAA,EAAcA,CAAC,GAAGC,QAAQ,CAA1B,MAAA,EAAmCD,CAAnC,EAAA,EAAwC;AACpC,UAAIE,IAAI,GAAGD,QAAQ,CADiB,CACjB,CAAnB,CADoC,CAGpC;;AACA,UAAKE,aAAa,GACd,yBAAyBD,IAAI,CAA7B,QAAA,GAAA,kBAAA,GACqBA,IAAI,CADzB,GAAA,GAAA,qBAAA,GAEwBA,IAAI,CAF5B,MAAA,GAAA,gCAAA,GAGmCA,IAAI,CAHvC,OAAA,GALgC,MAIpC,CAJoC,CAWpC;;AACAR,MAAAA,SAAS,CAATA,IAAAA,CAAe;AACXU,QAAAA,MAAM,EAAE,IAAIC,MAAM,CAANA,IAAAA,CAAJ,MAAA,CAAuBH,IAAI,CAAJA,QAAAA,CAAvB,CAAuBA,CAAvB,EAAyCA,IAAI,CAAJA,QAAAA,CADtC,CACsCA,CAAzC,CADG;AAEXI,QAAAA,OAAO,EAAE,IAAID,MAAM,CAANA,IAAAA,CAAJ,UAAA,CAA2B;AAChCE,UAAAA,OAAO,EADyB,aAAA;AAEhCC,UAAAA,QAAQ,EAAE;AAFsB,SAA3B,CAFE;AAMXC,QAAAA,QAAQ,EAAEP,IAAI,CANH,QAAA;AAOXQ,QAAAA,MAAM,EAAER,IAAI,CAPD,MAAA;AAQXS,QAAAA,GAAG,EAAET,IAAI,CARE,GAAA;AASXU,QAAAA,OAAO,EAAEV,IAAI,CAACU;AATH,OAAflB;AAlBmC,KAAA,CA8BvC;;;AACA,WAAA,SAAA;AAvE4B,GAwChC,CAxCgC,CA0ExC;;;AACQ,MAAIK,UAAU,GAAG,SAAbA,UAAa,CAAA,QAAA,EAAA,SAAA,EAA8B;AAE3C;AACA,QAAIc,QAAQ,GAAG;AAACC,MAAAA,GAAG,EAAJ,WAAA;AAAmBC,MAAAA,GAAG,EAAEnB;AAAxB,KAAf,CAH2C,CAK3C;;AACA,QAAI,CAAJ,GAAA,EAAS;AAEL;AACA,UAAIoB,GAAG,GAAG,IAAIX,MAAM,CAANA,IAAAA,CAAJ,GAAA,CAAoBY,QAAQ,CAARA,cAAAA,CAApB,KAAoBA,CAApB,EAAoD;AAC1DC,QAAAA,IAAI,EADsD,CAAA;AAE1DC,QAAAA,MAAM,EAAEN;AAFkD,OAApD,CAAV;AATuC,KAAA,CAe3C;;;AACAnB,IAAAA,SAAS,CAATA,OAAAA,CAAkB,UAAA,CAAA,EAAA,CAAA,EAAc;AAC5B,UAAI0B,MAAM,GAAG,IAAIf,MAAM,CAANA,IAAAA,CAAJ,MAAA,CAAuB;AAChCgB,QAAAA,QAAQ,EAAEC,CAAC,CADqB,MAAA;AAEhCN,QAAAA,GAAG,EAF6B,GAAA;AAGhCO,QAAAA,KAAK,EAH2B,SAAA;AAIhCC,QAAAA,IAAI,EAAE;AAJ0B,OAAvB,CAAb,CAD4B,CAQ5B;;AACAnB,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,WAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAA+C,UAAA,CAAA,EAAW;AAEtD;AACAoB,QAAAA,qBAAqB,GAArBA,CAAAA;AACAH,QAAAA,CAAC,CAADA,OAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA,MAAAA;AAJJjB,OAAAA;AAzBuC,KAgB3CX,EAhB2C,CAiC3C;;AACA,QAAIgC,eAAe,GAAG,IAAIrB,MAAM,CAANA,IAAAA,CAAJ,MAAA,CAAA,QAAA,EAAtB,SAAsB,CAAtB;AACA,QAAIe,MAAM,GAAG,IAAIf,MAAM,CAANA,IAAAA,CAAJ,MAAA,CAAuB;AAChCgB,MAAAA,QAAQ,EADwB,eAAA;AAEhCM,MAAAA,SAAS,EAAEtB,MAAM,CAANA,IAAAA,CAAAA,SAAAA,CAFqB,MAAA;AAGhCW,MAAAA,GAAG,EAH6B,GAAA;AAIhCQ,MAAAA,IAAI,EAAE;AAJ0B,KAAvB,CAAb;AAMAI,IAAAA,UAAU,GAAVA,MAAAA;AApH4B,GA2EhC,CA3EgC,CAwHxC;;;AACQvB,EAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EACIZ,gBAAgB,CAAhBA,OAAAA,CAAAA,WAAAA,EADJY,YACIZ,CADJY;AAGA,SAAA,gBAAA;AA7HRb,CAAAA","sourcesContent":["\r\n// Creates the gservice factory. This will be the primary means by which we interact with Google Maps\r\nangular.module('gservice', [])\r\n    .factory('gservice', function($http){\r\n\r\n        // Initialize Variables\r\n        // -------------------------------------------------------------\r\n        // Service our factory will return\r\n        var googleMapService = {};\r\n\r\n        // Array of locations obtained from API calls\r\n        var locations = [];\r\n\r\n        // Selected Location (initialize to center of America)\r\n        var selectedLat = 39.50;\r\n        var selectedLong = -98.35;\r\n\r\n        // Functions\r\n        // --------------------------------------------------------------\r\n        // Refresh the Map with new data. Function will take new latitude and longitude coordinates.\r\n        googleMapService.refresh = function(latitude, longitude){\r\n\r\n            // Clears the holding array of locations\r\n            locations = [];\r\n\r\n            // Set the selected lat and long equal to the ones provided on the refresh() call\r\n            selectedLat = latitude;\r\n            selectedLong = longitude;\r\n\r\n            // Perform an AJAX call to get all of the records in the db.\r\n            $http.get('/users').success(function(response){\r\n\r\n                // Convert the results into Google Map Format\r\n                locations = convertToMapPoints(response);\r\n\r\n                // Then initialize the map.\r\n                initialize(latitude, longitude);\r\n            }).error(function(){});\r\n        };\r\n\r\n        // Private Inner Functions\r\n        // --------------------------------------------------------------\r\n        // Convert a JSON of users into map points\r\n        var convertToMapPoints = function(response){\r\n\r\n            // Clear the locations holder\r\n            var locations = [];\r\n\r\n            // Loop through all of the JSON entries provided in the response\r\n            for(var i= 0; i < response.length; i++) {\r\n                var user = response[i];\r\n\r\n                // Create popup windows for each record\r\n                var  contentString =\r\n                    '<p><b>Username</b>: ' + user.username +\r\n                    '<br><b>Age</b>: ' + user.age +\r\n                    '<br><b>Gender</b>: ' + user.gender +\r\n                    '<br><b>Favorite Language</b>: ' + user.favlang +\r\n                    '</p>';\r\n\r\n                // Converts each of the JSON records into Google Maps Location format (Note [Lat, Lng] format).\r\n                locations.push({\r\n                    latlon: new google.maps.LatLng(user.location[1], user.location[0]),\r\n                    message: new google.maps.InfoWindow({\r\n                        content: contentString,\r\n                        maxWidth: 320\r\n                    }),\r\n                    username: user.username,\r\n                    gender: user.gender,\r\n                    age: user.age,\r\n                    favlang: user.favlang\r\n                });\r\n            }\r\n            // location is now an array populated with records in Google Maps format\r\n            return locations;\r\n        };\r\n\r\n// Initializes the map\r\n        var initialize = function(latitude, longitude) {\r\n\r\n            // Uses the selected lat, long as starting point\r\n            var myLatLng = {lat: selectedLat, lng: selectedLong};\r\n\r\n            // If map has not been created already...\r\n            if (!map){\r\n\r\n                // Create a new map and place in the index.html page\r\n                var map = new google.maps.Map(document.getElementById('map'), {\r\n                    zoom: 3,\r\n                    center: myLatLng\r\n                });\r\n            }\r\n\r\n            // Loop through each location in the array and place a marker\r\n            locations.forEach(function(n, i){\r\n                var marker = new google.maps.Marker({\r\n                    position: n.latlon,\r\n                    map: map,\r\n                    title: \"Big Map\",\r\n                    icon: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\r\n                });\r\n\r\n                // For each marker created, add a listener that checks for clicks\r\n                google.maps.event.addListener(marker, 'click', function(e){\r\n\r\n                    // When clicked, open the selected marker's message\r\n                    currentSelectedMarker = n;\r\n                    n.message.open(map, marker);\r\n                });\r\n            });\r\n\r\n            // Set initial location as a bouncing red marker\r\n            var initialLocation = new google.maps.LatLng(latitude, longitude);\r\n            var marker = new google.maps.Marker({\r\n                position: initialLocation,\r\n                animation: google.maps.Animation.BOUNCE,\r\n                map: map,\r\n                icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n            });\r\n            lastMarker = marker;\r\n\r\n        };\r\n\r\n// Refresh the page upon window load. Use the initial latitude and longitude\r\n        google.maps.event.addDomListener(window, 'load',\r\n            googleMapService.refresh(selectedLat, selectedLong));\r\n\r\n        return googleMapService;\r\n    });"],"file":"gservice.js"}